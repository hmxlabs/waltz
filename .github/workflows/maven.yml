# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Waltz Build (pg)

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        db: [ mssql ]


    services:
#      postgres:
#        image: postgres:16
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_DB: waltz
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5

      mssql:
        image: vibs2006/sql_server_fts:latest #mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Some4Complex#Password
          MSSQL_PID: "Express"
        # basic health check (tools are present on this image)
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Some4Complex#Password -C -Q 'SELECT 1'"
          --health-interval=120s
          --health-timeout=120s
          --health-retries=100


    steps:     
    - uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Cache Maven packages    
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2
        restore-keys: ${{ runner.os }}-m2

    - name: Update Maven Project Version
      if: ${{ github.ref_type == 'tag' }}
      run: mvn versions:set -DnewVersion=${{ github.ref_name }} -Pci,build-postgres,waltz-postgres;

    - name: Build with Maven (DB = ${{ matrix.db }})
      run: mvn -B -ntp -s .build.settings.xml -Pbuild-${{ matrix.db }},waltz-${{ matrix.db }},integration-tests clean package site -Dtarget.db=${{ matrix.db }} -Ddb.provider=docker;

    - name: Publish build
      uses: actions/upload-artifact@v4
      with:
        name: waltz-web-${{ matrix.db }}.war
        path: waltz-web/target/waltz-web.war

    - name: Publish mocha results
      uses: actions/upload-artifact@v4
      with:
        name: mocha-test-results-${{ matrix.db }}.txt
        path: waltz-ng/mocha-test-results.txt

    - name: Publish liquibase changelogs
      uses: actions/upload-artifact@v4
      with:
        name: liquibase-changelogs-${{ matrix.db }}
        path: waltz-schema/src/main/resources/liquibase/

    - name: Publish Java Test results
      uses: actions/upload-artifact@v4
      with:
        name: surefire-results-${{ matrix.db }}.html
        path: target/site/surefire-report.html
  
    - name: Login to GitHub Registry
      if: ${{ github.ref_type == 'tag' }}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ghcr.io/${{ github.repository }}
        flavor: latest=true
        tags: |
          type=ref,event=tag,enable=${{ github.ref_type == 'tag' }}
          type=raw,value=${{ matrix.db }}-${{ github.ref_name }},enable=${{ github.ref_type == 'tag' }}
          type=raw,value=${{ matrix.db }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.ref_type == 'tag' }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}

    - name: Release
      uses: softprops/action-gh-release@v1
      if: ${{ github.ref_type == 'tag' }}
      with:
        files: |
          waltz-schema/target/liquibase-scripts.zip
          waltz-web/target/waltz-web-${{ matrix.db }}.war
          waltz-web/target/waltz-web-jar-with-dependencies-${{ matrix.db }}.jar
